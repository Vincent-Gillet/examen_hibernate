package com.exemple.dao;

import java.util.List;

import org.hibernate.Session;
import org.hibernate.SessionFactory;

import com.exemple.model.BorneRecharge;
import com.exemple.model.EtatBorne;

import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Root;

/**
 * DAO pour la gestion des entit√©s BorneRecharge.
 * 
 * Elle comprend √©galement une m√©thode pour rechercher les 
 * bornes qui ont un tarif sup√©rieure √† un montant choisi. 
 * Mais √©galement une m√©thode pour les tier en fonction 
 * de leur √©tat.
 * 
 * H√©rite des op√©rations CRUD g√©n√©riques de GenericDaoImpl.
 * 
 * @author Vincent
 * @version 1.0
 */

public class BorneRechargeDao extends GenericDaoImpl<BorneRecharge, Long> {
    public BorneRechargeDao (SessionFactory sessionFactory) {
        super(sessionFactory, BorneRecharge.class);
    }


    // 1. üîç Rechercher toutes les bornes disponibles pour un cr√©neau horaire donn√© (non d√©j√† r√©serv√©es √† ce moment).


    // 4. üßæ Rechercher les bornes dont le tarif horaire d√©passe une certaine valeur.
    public List<BorneRecharge> tarifSperieurA(double tarifHoraire) {
        try (Session s = sessionFactory.openSession()) {
            CriteriaBuilder cb = s.getCriteriaBuilder();
            CriteriaQuery<BorneRecharge> cq = cb.createQuery(BorneRecharge.class);
            Root<BorneRecharge> root = cq.from(BorneRecharge.class);
            cq.select(root)
                .where(cb.gt(root.get("tarifHoraire"), tarifHoraire))
                .orderBy(cb.desc(root.get("tarifHoraire"))); 
            return s.createQuery(cq).getResultList();
        }
    }

    // 5. üõ†Ô∏è Trouver les bornes actuellement en maintenance ou inactives (filtrage sur l'√©tat).
    public List<BorneRecharge> triParEtat(EtatBorne etat) {
        try (Session s = sessionFactory.openSession()) {
            CriteriaBuilder cb = s.getCriteriaBuilder();
            CriteriaQuery<BorneRecharge> cq = cb.createQuery(BorneRecharge.class);
            Root<BorneRecharge> root = cq.from(BorneRecharge.class);
            cq.select(root)
                .where(cb.equal(root.get("etat"), etat));
            return s.createQuery(cq).getResultList();
        }
    }
}
